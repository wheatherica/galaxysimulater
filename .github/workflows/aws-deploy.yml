name: Deploy to AWS

on:
  push:
    branches:
      - main
      - master
      - develop
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '18.x'

jobs:
  validate:
    name: Validate CloudFormation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate CloudFormation templates
        run: |
          for template in aws/cloudformation/*.yaml; do
            echo "Validating $template"
            aws cloudformation validate-template --template-body file://$template
          done

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint || true

      - name: Run type checking
        run: npm run typecheck || true

      - name: Run ${{ matrix.test-type }} tests
        run: npm run test:${{ matrix.test-type }} || true
        env:
          CI: true

      - name: Upload coverage
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests

  build-lambda:
    name: Build Lambda Functions
    runs-on: ubuntu-latest
    needs: [validate, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Lambda dependencies
        uses: actions/cache@v3
        with:
          path: |
            aws/lambda/*/node_modules
            ~/.npm
          key: ${{ runner.os }}-lambda-${{ hashFiles('aws/lambda/*/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-lambda-

      - name: Install and build Lambda functions
        run: |
          for dir in aws/lambda/*/; do
            if [ -f "$dir/package.json" ]; then
              echo "Building Lambda function in $dir"
              cd "$dir"
              npm ci --production
              
              # Create deployment package
              zip -r deployment.zip . -x "*.zip" -x "test/*" -x "*.test.js"
              
              cd -
            fi
          done

      - name: Upload Lambda artifacts
        uses: actions/upload-artifact@v3
        with:
          name: lambda-packages
          path: aws/lambda/*/deployment.zip
          retention-days: 7

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [validate, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Export static files
        run: npm run export || true

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: |
            .next
            out
          retention-days: 7

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [build-lambda, build-frontend]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production') || 'development' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Lambda artifacts
        uses: actions/download-artifact@v3
        with:
          name: lambda-packages
          path: aws/lambda

      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Deploy CloudFormation stack
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production') || 'development' }}
          STACK_NAME="galaxy-simulator-${ENVIRONMENT}"
          
          # Package the CloudFormation template
          sam package \
            --template-file aws/cloudformation/enhanced-galaxy-stack.yaml \
            --s3-bucket ${{ secrets.CLOUDFORMATION_BUCKET }} \
            --output-template-file packaged-template.yaml
          
          # Deploy the stack
          sam deploy \
            --template-file packaged-template.yaml \
            --stack-name $STACK_NAME \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \
            --parameter-overrides \
              Environment=$ENVIRONMENT \
              EnableMonitoring=${{ github.ref == 'refs/heads/main' && 'true' || 'false' }} \
              EnableCache=${{ github.ref == 'refs/heads/main' && 'true' || 'false' }} \
            --no-fail-on-empty-changeset

      - name: Get stack outputs
        id: stack-outputs
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production') || 'development' }}
          STACK_NAME="galaxy-simulator-${ENVIRONMENT}"
          
          # Get outputs
          API_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`APIEndpoint`].OutputValue' \
            --output text)
          
          WEBAPP_URL=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`WebAppURL`].OutputValue' \
            --output text)
          
          echo "api_endpoint=$API_ENDPOINT" >> $GITHUB_OUTPUT
          echo "webapp_url=$WEBAPP_URL" >> $GITHUB_OUTPUT

  deploy-frontend:
    name: Deploy Frontend to Amplify
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production') || 'development' }}
      url: ${{ steps.amplify-deploy.outputs.app_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Trigger Amplify deployment
        id: amplify-deploy
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production') || 'development' }}
          APP_ID=$(aws amplify list-apps --query "apps[?name=='galaxy-simulator-${ENVIRONMENT}'].appId" --output text)
          
          if [ -n "$APP_ID" ]; then
            # Start a new build
            JOB_ID=$(aws amplify start-job \
              --app-id $APP_ID \
              --branch-name $ENVIRONMENT \
              --job-type RELEASE \
              --query 'jobSummary.jobId' \
              --output text)
            
            echo "Started Amplify job: $JOB_ID"
            
            # Wait for deployment to complete
            while true; do
              STATUS=$(aws amplify get-job \
                --app-id $APP_ID \
                --branch-name $ENVIRONMENT \
                --job-id $JOB_ID \
                --query 'job.summary.status' \
                --output text)
              
              echo "Job status: $STATUS"
              
              if [ "$STATUS" == "SUCCEED" ]; then
                break
              elif [ "$STATUS" == "FAILED" ] || [ "$STATUS" == "CANCELLED" ]; then
                echo "Deployment failed with status: $STATUS"
                exit 1
              fi
              
              sleep 30
            done
            
            # Get the app URL
            APP_URL=$(aws amplify get-app --app-id $APP_ID --query 'app.defaultDomain' --output text)
            echo "app_url=https://${ENVIRONMENT}.${APP_URL}" >> $GITHUB_OUTPUT
          fi

  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-frontend]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install test dependencies
        run: |
          cd tests/integration
          npm ci

      - name: Run API integration tests
        run: |
          cd tests/integration
          npm run test:api
        env:
          API_ENDPOINT: ${{ needs.deploy-infrastructure.outputs.api_endpoint }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      - name: Run E2E tests with Playwright
        run: |
          cd tests/e2e
          npm ci
          npx playwright install
          npm run test
        env:
          WEBAPP_URL: ${{ needs.deploy-frontend.outputs.app_url }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

  performance-tests:
    name: Run Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-frontend]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run k6 performance tests
        uses: grafana/k6-action@v0.3.0
        with:
          filename: tests/performance/simulation-load-test.js
        env:
          API_ENDPOINT: ${{ needs.deploy-infrastructure.outputs.api_endpoint }}
          K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-frontend, integration-tests]
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Galaxy Simulator Deployment ${{ job.status }}
            Environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production') || 'development' }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: env.SLACK_WEBHOOK_URL != ''

      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production') || 'development' }}';
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: environment,
              auto_merge: false,
              required_contexts: [],
              description: 'Galaxy Simulator deployment'
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              environment_url: '${{ needs.deploy-frontend.outputs.app_url }}',
              description: 'Deployment ${{ job.status }}'
            });

  cleanup:
    name: Cleanup Old Resources
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-frontend]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Clean up old Lambda versions
        run: |
          # List all Lambda functions
          FUNCTIONS=$(aws lambda list-functions --query 'Functions[?starts_with(FunctionName, `galaxy-`)].[FunctionName]' --output text)
          
          for FUNCTION in $FUNCTIONS; do
            echo "Cleaning up old versions of $FUNCTION"
            
            # Get all versions except $LATEST
            VERSIONS=$(aws lambda list-versions-by-function \
              --function-name $FUNCTION \
              --query 'Versions[?Version!=`$LATEST`].[Version]' \
              --output text | sort -nr | tail -n +4)
            
            # Delete old versions (keep last 3)
            for VERSION in $VERSIONS; do
              echo "Deleting version $VERSION of $FUNCTION"
              aws lambda delete-function --function-name "${FUNCTION}:${VERSION}" || true
            done
          done

      - name: Clean up old CloudFormation stacks
        run: |
          # Delete stacks older than 7 days in non-production environments
          STACKS=$(aws cloudformation list-stacks \
            --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE \
            --query "StackSummaries[?starts_with(StackName, 'galaxy-simulator-') && !contains(StackName, 'production')].[StackName,CreationTime]" \
            --output text)
          
          SEVEN_DAYS_AGO=$(date -u -d '7 days ago' +%s)
          
          echo "$STACKS" | while read STACK_NAME CREATION_TIME; do
            if [ -n "$STACK_NAME" ]; then
              CREATION_TIMESTAMP=$(date -d "$CREATION_TIME" +%s)
              if [ $CREATION_TIMESTAMP -lt $SEVEN_DAYS_AGO ]; then
                echo "Deleting old stack: $STACK_NAME"
                aws cloudformation delete-stack --stack-name $STACK_NAME || true
              fi
            fi
          done